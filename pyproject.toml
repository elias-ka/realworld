[tool.poetry]
name = "realworld"
version = "0.1.0"
description = ""
authors = ["elias-ka <48407293+elias-ka@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pydantic = { extras = ["email"], version = "^1.10.9" }
sqlalchemy = { extras = ["mypy"], version = "^2.0.17" }
uvicorn = { extras = ["standard"], version = "^0.22.0" }
fastapi = "^0.97.0"
alembic = "^1.11.1"
python-dotenv = "^1.0.0"
bcrypt = "^4.0.1"
pyjwt = { extras = ["crypto"], version = "^2.7.0" }
asyncpg = "^0.27.0"
python-slugify = { extras = ["unidecode"], version = "^8.0.1" }


[tool.poetry.group.lint.dependencies]
ruff = "^0.0.272"
black = "^23.3.0"


[tool.poetry.group.typing.dependencies]
mypy = "^1.3.0"
types-python-slugify = "^8.0.0.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
extend-exclude = ["migrations/versions"]
ignore = [
    "B008",   # function-call-in-default-argument, required for FastAPI dependency injection
    "ANN101", # missing-type-self, the type of self is usually inferred by type checkers
    "SIM102", # collapsible-if, sometimes nested ifs are more readable
]
extend-select = [
    "W",   # pycodestyle warnings
    "N",   # pep-8 naming
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "RUF", # ruff-specific
]

[tool.black]
line-length = 120
target-version = ["py39", "py310", "py311"]


[tool.mypy]
plugins = ["sqlalchemy.ext.mypy.plugin"]
